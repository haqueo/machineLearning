source('~/Documents/Year3/StochasticSimulation/stochastic/Question2.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottingcdf.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottingcdf.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottingcdf.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottingcdf.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottingcdf.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottingcdf.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
sup
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottinggraphs.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/test.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
cat("acceptance probability=", format(count/total), "\n")
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/Question2updated.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/question3.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plot.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottingcdf.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/plottingcdf.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/hxplot/hxplot.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/hxplot/hxplot.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/hxplot/hxplot.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/hxplot/hxplot.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/FINAL/FINALSCRIPT.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
source('~/Documents/Year3/StochasticSimulation/stochastic/timing.R')
load("prestige-data.RData")
load("prestige-data.RData")
seq?
a
?seq
list(10)
vector(,10)
vector(0,10)
?min
min(1,3)
?runif
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
T = 10
t <- seq(0,T,0.01)
t
t = t[1:length(t)]
t
c()
x <- c()
x <- x(x,2)
x <- c(x,2)
x
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
source('~/Documents/Year3/StochasticSimulation/Untitled.R')
rnorm(1)
?rnorm
rnorm(100)
install.packages("mlbench,e1071")
install.packages("mlbench","e1071")
library(mlbench)
library(e1071)
install.packages("e1071")
library(e1071)
data("HouseVotes84")
head(HouseVotes84)
source('~/Documents/Year4/DataScience/20Oct/script.R')
source('~/Documents/Year4/DataScience/20Oct/script.R')
plot(HouseVotes84[,2])
title(main="Votes cast for issue", xlab="vote", ylab="Number reps")
source('~/Documents/Year4/DataScience/20Oct/script.R')
install.packages("ggplot")
library(ggplot)
library(ggplot2)
source('~/Documents/Year4/DataScience/20Oct/script.R')
nrow(HouseVotes84)
source('~/Documents/Year4/DataScience/20Oct/script.R')
source('~/Documents/Year4/DataScience/20Oct/script.R')
source('~/Documents/Year4/DataScience/20Oct/script.R')
source('~/Documents/Year4/DataScience/20Oct/script.R')
source('~/Documents/Year4/DataScience/20Oct/script.R')
source('~/Documents/Year4/DataScience/20Oct/script.R')
?HouseVotes84
head(HouseVotes84)
size(HouseVotes84)
dim(HouseVotes84)
Alex <- 430
Alex <- 250
HouseVotes84[Alex,]
Name <- Alex
Name
source('~/Documents/Year4/DataScience/20Oct/ex4.R')
dim(HouseVotes84)[0]
dim(HouseVotes84)
dim(HouseVotes84)[1]
head(HouseVotes84)
HouseVotes84[Name,1]
max.component <- max(components(docnet.disrupt)$csize)
??adm
setwd("/Users/Omar/Documents/Year4/machineLearning/coursework1")
library(rARPACK)
faces.train.inputs <- read.csv("./2018_ML_Assessed_Coursework_1_Data/Faces_Train_Inputs.csv",head=FALSE)
faces.train.label <- read.csv("./2018_ML_Assessed_Coursework_1_Data/Faces_Train_Labels.csv",head=FALSE)
faces.test.inputs <- read.csv("./2018_ML_Assessed_Coursework_1_Data/Faces_Test_Inputs.csv",head=FALSE)
faces.test.label <- read.csv("./2018_ML_Assessed_Coursework_1_Data/Faces_Test_Labels.csv",head=FALSE)
faces.train.inputs.cleaned <- lapply(apply(X=faces.train.inputs, MARGIN=1, function(x) list(matrix(as.numeric(x), nrow = 112))), "[[", 1)
avg.face <- Reduce('+', faces.train.inputs.cleaned) / length(faces.train.inputs.cleaned)
image(avg.face)
find.pca.basis <- function(M,X, return.full.results = FALSE){
n <- dim(X)[1] # The number of images
# Turn the input data into a matrix and transpose it
X.data.matrix <- data.matrix(t(X))
# Centralise the data matrix
means <- rowMeans(X.data.matrix) # calculate row means
data.matrix.centralised <- X.data.matrix - means %*% t(rep(1,n)) # and subtract
# Calculate the covariance matrix as defined in lectures
covariance.matrix <- (data.matrix.centralised %*% t(data.matrix.centralised)) / n
# Now I need to compute the first M eigenvectors/ eigenvalues using the R package rARPACK
results <- eigs_sym(covariance.matrix,k=M,which="LM")
if (return.full.results){
return(results)
} else{
return(results$vectors)
}
}
eigenbasis <- find.pca.basis(5,faces.train.inputs)
par(mfrow=c(2,3))
for (i in 1:5){
image(matrix(eigenbasis[,i], nrow = 112),useRaster=TRUE, axes=FALSE)
}
par(mfrow=c(1,1))
dimensions <- c(5,10,50)
single.face <- 1
means <- as.vector(avg.face)
for (i in dimensions){
eigenbasis <- find.pca.basis(i,faces.train.inputs)
projection.vals <- t(as.numeric(faces.train.inputs[single.face,]) - means) %*% eigenbasis
projection.vector <- eigenbasis %*% as.numeric(as.list(projection.vals))
image(matrix(projection.vector, nrow = 112),useRaster=TRUE, axes=FALSE)
}
image(matrix(as.numeric(faces.train.inputs[1,]), nrow = 112),useRaster=TRUE, axes=FALSE)
full.results <- find.pca.basis(320,faces.train.inputs,return.full.results = TRUE)
mses <- (cumsum(full.results$values)[length(full.results$values)] - cumsum(full.results$values) )
plot(mses,xlab="Dimensionality of PCA",ylab="Mean Square Error")
k.nearest.neighbours <- function(training.data.matrix, training.data.labels, testing.data.matrix,
K = 10, distance.type = "euclidean"){
# Make sure all the data is numeric
training.data.matrix <- data.matrix(training.data.matrix)
testing.data.matrix <- data.matrix(testing.data.matrix)
training.data.labels <- as.numeric(training.data.labels)
# Initialise the list which will take the classifications
classifiers <- c()
# iterate through every row of the testing matrix
for (i in 1:dim(testing.data.matrix)[1]){
# compute the distance of this row of the testing matrix to every other row in the training set
all.distances <- apply(training.data.matrix, MARGIN=1, function(x) distance(rbind(testing.data.matrix[i,],x),method=distance.type))
# sort these distances in increasing order.
sorted.distances <- sort(all.distances,index.return=TRUE)
# Look at the k closest rows in the training set to this testing row. Whichever classification comes
# up the most - is the classification we will give this particular row.
classification <- sort(tabulate(training.data.labels[sorted.distances$ix[1:K]]), index.return=TRUE,decreasing = TRUE)$ix[1]
# add it to the list of classifiers
classifiers <- c(classifiers,classification)
}
return(classifiers)
}
classes <- k.nearest.neighbours(training.data.matrix = faces.train.inputs,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.inputs,K=4)
library(philentropy)
classes <- k.nearest.neighbours(training.data.matrix = faces.train.inputs,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.inputs,K=4)
classes
classes.actual <- as.integer(faces.test.label)
classes.actual
accuracy <- length(which(classes == classes.actual)) / length(classes.actual)
print(accuracy)
classes <- k.nearest.neighbours(training.data.matrix = faces.train.inputs,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.inputs,K=3)
classes.actual <- as.integer(faces.test.label)
accuracy <- length(which(classes == classes.actual)) / length(classes.actual)
print(accuracy)
?distance
accuracy.euc.list <- c()
accuracy.euc.list <- c()
accuracy.man.list <- c()
accuracy.squaredeuc.list <- c()
for (i in 1:8){
classes.euc <- k.nearest.neighbours(training.data.matrix = faces.train.inputs,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.inputs,K=i, distance.type = "euclidean")
classes.man <- k.nearest.neighbours(training.data.matrix = faces.train.inputs,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.inputs,K=i, distance.type = "manhattan")
classes.squaredeuc <- k.nearest.neighbours(training.data.matrix = faces.train.inputs,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.inputs,K=i, distance.type = "squared_euclidean")
classes.actual <- as.integer(faces.test.label)
accuracy.euc <- length(which(classes.euc == classes.actual)) / length(classes.actual)
accuracy.euc.list <- c(accuracy.euc.list,accuracy.euc)
accuracy.man <-length(which(classes.man == classes.actual)) / length(classes.actual)
accuracy.man.list <- c(accuracy.man.list,accuracy.man)
accuracy.squaredeuc <- length(which(classes.squaredeuc == classes.actual)) / length(classes.actual)
accuracy.squaredeuc.list <- c(accuracy.squaredeuc.list,accuracy.squaredeuc)
}
k.nearest.neighbours <- function(training.data.matrix, training.data.labels, testing.data.matrix,
K = 10, distance.type = "squared_euclidean"){
# Make sure all the data is numeric
training.data.matrix <- data.matrix(training.data.matrix)
testing.data.matrix <- data.matrix(testing.data.matrix)
training.data.labels <- as.numeric(training.data.labels)
# Initialise the list which will take the classifications
classifiers <- c()
# iterate through every row of the testing matrix
for (i in 1:dim(testing.data.matrix)[1]){
# compute the distance of this row of the testing matrix to every other row in the training set
all.distances <- apply(training.data.matrix, MARGIN=1, function(x) distance(rbind(testing.data.matrix[i,],x),method=distance.type))
# sort these distances in increasing order.
sorted.distances <- sort(all.distances,index.return=TRUE)
# Look at the k closest rows in the training set to this testing row. Whichever classification comes
# up the most - is the classification we will give this particular row.
classification <- sort(tabulate(training.data.labels[sorted.distances$ix[1:K]]), index.return=TRUE,decreasing = TRUE)$ix[1]
# add it to the list of classifiers
classifiers <- c(classifiers,classification)
}
return(classifiers)
}
eigenbasis <- find.pca.basis(150,faces.train.inputs)
faces.train.new.basis <- lapply(X = c(1:320),FUN=function(x) t(as.numeric(faces.train.inputs[x,]) - means) %*% eigenbasis)
faces.train.new.basis <- do.call("rbind",faces.train.new.basis)
faces.test.new.basis <- lapply(X = c(1:80),FUN=function(x) t(as.numeric(faces.test.inputs[x,]) - means) %*% eigenbasis)
faces.test.new.basis <- do.call("rbind",faces.test.new.basis)
faces.train.new.basis <- lapply(X = c(1:320),FUN=function(x) t(as.numeric(faces.train.inputs[x,]) - means) %*% eigenbasis)
accuracy.euc.list <- c()
accuracy.man.list <- c()
accuracy.squaredeuc.list <- c()
for (i in 1:8){
classes.euc <- k.nearest.neighbours(training.data.matrix = faces.train.new.basis ,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.new.basis,K=i, distance.type = "euclidean")
classes.man <- k.nearest.neighbours(training.data.matrix = faces.train.new.basis,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.new.basis,K=i, distance.type = "manhattan")
classes.squaredeuc <- k.nearest.neighbours(training.data.matrix = faces.train.new.basis,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.new.basis,K=i, distance.type = "squared_euclidean")
classes.actual <- as.integer(faces.test.label)
accuracy.euc <- length(which(classes.euc == classes.actual)) / length(classes.actual)
accuracy.euc.list <- c(accuracy.euc.list,accuracy.euc)
accuracy.man <-length(which(classes.man == classes.actual)) / length(classes.actual)
accuracy.man.list <- c(accuracy.man.list,accuracy.man)
accuracy.squaredeuc <- length(which(classes.squaredeuc == classes.actual)) / length(classes.actual)
accuracy.squaredeuc.list <- c(accuracy.squaredeuc.list,accuracy.squaredeuc)
}
dim(faces.train.new.basis)
dim(faces.test.new.basis)
faces.train.new.basis <- do.call("rbind",faces.train.new.basis)
dim(faces.test.new.basis)
accuracy.euc.list <- c()
accuracy.man.list <- c()
accuracy.squaredeuc.list <- c()
for (i in 1:8){
classes.euc <- k.nearest.neighbours(training.data.matrix = faces.train.new.basis ,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.new.basis,K=i, distance.type = "euclidean")
classes.man <- k.nearest.neighbours(training.data.matrix = faces.train.new.basis,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.new.basis,K=i, distance.type = "manhattan")
classes.squaredeuc <- k.nearest.neighbours(training.data.matrix = faces.train.new.basis,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.new.basis,K=i, distance.type = "squared_euclidean")
classes.actual <- as.integer(faces.test.label)
accuracy.euc <- length(which(classes.euc == classes.actual)) / length(classes.actual)
accuracy.euc.list <- c(accuracy.euc.list,accuracy.euc)
accuracy.man <-length(which(classes.man == classes.actual)) / length(classes.actual)
accuracy.man.list <- c(accuracy.man.list,accuracy.man)
accuracy.squaredeuc <- length(which(classes.squaredeuc == classes.actual)) / length(classes.actual)
accuracy.squaredeuc.list <- c(accuracy.squaredeuc.list,accuracy.squaredeuc)
}
plot(accuracy.euc.list)
plot(accuracy.man.list)
plot(accuracy.squaredeuc.list)
eigenbasis <- find.pca.basis(200,faces.train.inputs)
faces.train.new.basis <- lapply(X = c(1:320),FUN=function(x) t(as.numeric(faces.train.inputs[x,]) - means) %*% eigenbasis)
faces.train.new.basis <- do.call("rbind",faces.train.new.basis)
faces.test.new.basis <- lapply(X = c(1:80),FUN=function(x) t(as.numeric(faces.test.inputs[x,]) - means) %*% eigenbasis)
faces.test.new.basis <- do.call("rbind",faces.test.new.basis)
accuracy.euc.list <- c()
accuracy.man.list <- c()
accuracy.squaredeuc.list <- c()
for (i in 1:8){
classes.euc <- k.nearest.neighbours(training.data.matrix = faces.train.new.basis ,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.new.basis,K=i, distance.type = "euclidean")
classes.man <- k.nearest.neighbours(training.data.matrix = faces.train.new.basis,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.new.basis,K=i, distance.type = "manhattan")
classes.squaredeuc <- k.nearest.neighbours(training.data.matrix = faces.train.new.basis,
training.data.labels = faces.train.label,
testing.data.matrix = faces.test.new.basis,K=i, distance.type = "squared_euclidean")
classes.actual <- as.integer(faces.test.label)
accuracy.euc <- length(which(classes.euc == classes.actual)) / length(classes.actual)
accuracy.euc.list <- c(accuracy.euc.list,accuracy.euc)
accuracy.man <-length(which(classes.man == classes.actual)) / length(classes.actual)
accuracy.man.list <- c(accuracy.man.list,accuracy.man)
accuracy.squaredeuc <- length(which(classes.squaredeuc == classes.actual)) / length(classes.actual)
accuracy.squaredeuc.list <- c(accuracy.squaredeuc.list,accuracy.squaredeuc)
}
## now check and plot them
plot(accuracy.euc.list)
plot(accuracy.man.list)
plot(accuracy.squaredeuc.list)
dim(eigenbasis)
